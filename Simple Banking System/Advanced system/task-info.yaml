type: edu
custom_name: stage4
files:
- name: test/SimpleBankSystemTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.junit.AfterClass;
    import org.junit.BeforeClass;

    import java.io.File;
    import java.io.IOException;
    import java.nio.file.Files;
    import java.nio.file.Path;
    import java.nio.file.Paths;
    import java.sql.*;
    import java.util.HashMap;
    import java.util.Map;
    import java.util.Random;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class SimpleBankSystemTest extends StageTest<String> {

        private static final String databaseFileName = "card.s3db";
        private static final String tempDatabaseFileName = "tempDatabase.s3db";
        private static final String[] args = {"-fileName", databaseFileName};
        private static final Map<String, String> correctData = new HashMap<>();

        private static final Pattern cardNumberPattern = Pattern.compile("^400000\\d{10}$", Pattern.MULTILINE);
        private static final Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);

        private static Connection connection;


        @DynamicTest
        CheckResult test1_checkDatabaseFile() {
            try {
                Files.deleteIfExists(Paths.get(tempDatabaseFileName));
                Files.deleteIfExists(Paths.get(databaseFileName));
            } catch (Exception ignored) {
            }

            TestedProgram program = new TestedProgram();
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            File file = new File(databaseFileName);

            if (!file.exists()) {
                return CheckResult.wrong("You should create a database file " +
                    "named " + databaseFileName + ". The file name should be taken from the command line arguments.\n" +
                    "The database file shouldn't be deleted after stopping the program!");
            }

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test2_checkConnection() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            getConnection();
            closeConnection();

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test3_checkIfTableExists() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            try {
                ResultSet resultSet = getConnection().createStatement().executeQuery(
                    "SELECT name FROM sqlite_master WHERE type ='table' AND name NOT LIKE 'sqlite_%';");
                while (resultSet.next()) {
                    if (resultSet.getString("name").equals("card")) {
                        closeConnection();
                        return CheckResult.correct();
                    }
                }
            } catch (SQLException e) {
                closeConnection();
                return CheckResult.wrong("Can't execute a query in your database! Make sure that your database isn't broken and you close your connection at the end of the program!");
            }

            closeConnection();
            return CheckResult.wrong("Your database doesn't have a table named 'card'");
        }

        @DynamicTest
        CheckResult test4_checkColumns() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            try {

                ResultSet resultSet = getConnection().createStatement().executeQuery("PRAGMA table_info(card);");
                Map<String, String> columns = new HashMap<>();

                while (resultSet.next()) {
                    columns.put(resultSet.getString("name").toLowerCase(), resultSet.getString("type").toUpperCase());
                }

                String[][] correctColumns = {
                    {"id", "INTEGER", "INT"},
                    {"number", "TEXT", "VARCHAR"},
                    {"pin", "TEXT", "VARCHAR"},
                    {"balance", "INTEGER", "INT"}};

                for (String[] correctColumn : correctColumns) {
                    String errorMessage = "Can't find '" + correctColumn[0] + "' column with '" + correctColumn[1] + "' type.\n" +
                        "Your table should have columns described in " +
                        "the stage instructions.";
                    if (!columns.containsKey(correctColumn[0])) {
                        return CheckResult.wrong(errorMessage);
                    } else if (!columns.get(correctColumn[0]).contains(correctColumn[1]) && !columns.get(correctColumn[0]).contains(correctColumn[2])) {
                        return CheckResult.wrong(errorMessage);
                    }
                }
            } catch (SQLException e) {
                return CheckResult.wrong("Can't connect to the database!");
            }

            closeConnection();
            return CheckResult.correct();
        }


        @DynamicTest
        CheckResult test5_checkAddingRowsToTheTable() {

            deleteAllRows();

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            stopAndCheckIfUserProgramWasStopped(program);

            try {

                ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM card");
                Map<String, String> userData = new HashMap<>();

                while (resultSet.next()) {
                    System.out.println(resultSet.getString("number"));
                    if (resultSet.getString("number") == null) {
                        return CheckResult.wrong("The card number shouldn't be null in the database!");
                    }
                    if (resultSet.getInt("balance") != 0) {
                        return CheckResult.wrong("Default balance value should be 0 in the database!");
                    }
                    if (resultSet.getString("pin") == null) {
                        return CheckResult.wrong("The PIN shouldn't be null in the database!");
                    }
                    userData.put(resultSet.getString("number"), resultSet.getString("pin"));
                }

                for (Map.Entry<String, String> entry : correctData.entrySet()) {
                    if (!userData.containsKey(entry.getKey())) {
                        return CheckResult.wrong("Your database doesn't save newly created cards.");
                    } else if (!userData.get(entry.getKey()).equals(entry.getValue())) {
                        return CheckResult.wrong("Correct PIN for card number " + entry.getKey() + " should " +
                            "be " + entry.getValue());
                    }
                }


            } catch (SQLException e) {
                return CheckResult.wrong("Can't connect the database!");
            }

            closeConnection();
            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test6_checkLogIn() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return CheckResult.wrong("You are printing the card number " +
                    "incorrectly. The card number should look like in the example:" +
                    " 400000DDDDDDDDDD, where D is a digit.");
            }

            Matcher pinMatcher = pinPattern.matcher(output);

            if (!pinMatcher.find()) {
                return CheckResult.wrong("You are printing the card PIN " +
                    "incorrectly. The PIN should look like in the example: DDDD, where D is a digit.");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + correctPin);

            if (!output.toLowerCase().contains("successfully")) {
                return CheckResult.wrong("The user should be signed in after" +
                    " entering the correct card information.");
            }

            stopAndCheckIfUserProgramWasStopped(program);

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test7_checkLogInWithWrongPin() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return CheckResult.wrong("You should output card number and PIN like in example");
            }

            String correctCardNumber = cardNumberMatcher.group();
            String correctPin = pinMatcher.group();

            Random random = new Random();

            String incorrectPin = correctPin;

            while (correctPin.equals(incorrectPin)) {
                incorrectPin = String.valueOf(1000 + random.nextInt(8999));
            }

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + incorrectPin);

            if (output.toLowerCase().contains("successfully")) {
                return CheckResult.wrong("The user should not be signed in" +
                    " after entering incorrect card information.");
            }

            stopAndCheckIfUserProgramWasStopped(program);
            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test8_checkLogInToNotExistingAccount() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return CheckResult.wrong("You should output card number and PIN like in example");
            }

            String correctCardNumber = cardNumberMatcher.group();
            String correctPin = pinMatcher.group();

            Random random = new Random();

            String incorrectCardNumber = correctCardNumber;

            while (correctCardNumber.equals(incorrectCardNumber)) {
                incorrectCardNumber = "400000" + (1_000_000_00 + random.nextInt(8_000_000_00));
            }

            program.execute("2");
            output = program.execute(incorrectCardNumber + "\n" + correctPin);

            if (output.toLowerCase().contains("successfully")) {
                return CheckResult.wrong("The user should not be signed in" +
                    " after entering incorrect card information.");
            }

            stopAndCheckIfUserProgramWasStopped(program);
            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test9_checkBalance() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return CheckResult.wrong("You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);

            output = program.execute("1");

            if (!output.contains("0")) {
                return CheckResult.wrong("Expected balance: 0");
            }

            stopAndCheckIfUserProgramWasStopped(program);
            return CheckResult.correct();
        }

        // ttest is not a typo!
        @DynamicTest
        CheckResult ttest10_checkAddIncome() {

            deleteAllRows();

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);
            program.execute("2\n10000");
            stopAndCheckIfUserProgramWasStopped(program);

            int userBalance = getBalance(correctCardNumber);
            if (userBalance != 10000) {
                return CheckResult.wrong("Account balance int the database is wrong after adding income.\nExpected 10000");
            }

            program = new TestedProgram();
            program.start(args);

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);
            program.execute("2\n15000");
            stopAndCheckIfUserProgramWasStopped(program);

            userBalance = getBalance(correctCardNumber);
            if (userBalance != 25000) {
                return CheckResult.wrong("Account balance is wrong after adding income.\nExpected 25000");
            }

            return CheckResult.correct();
        }

        // ttest is not a typo!
        @DynamicTest
        CheckResult ttest11_checkTransfer() {

            String incorrectCardNumber = "2000007269641764"; //Doesn't pass Luhn algorithm
            String notExistingCardNumber = "2000007269641768";

            deleteAllRows();

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return new CheckResult(false, "Your program outputs card number " +
                    "wrong.\nCard number should look like 400000DDDDDDDDDD. Where D is some digit");
            }

            String toTransferCardNumber = cardNumberMatcher.group();

            output = program.execute("1");

            cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);
            output = program.execute("3\n" + incorrectCardNumber);

            if (!output.contains("mistake")) {
                return new CheckResult(false, "You should not allow to transfer " +
                    "to a card number that doesn't pass the Luhn algorithm.\n You should print " +
                    "'Probably you made mistake in the card number. Please try again!'");
            }

            output = program.execute("3\n" + notExistingCardNumber);

            if (!output.contains("exist")) {
                return new CheckResult(false, "You should not allow to transfer " +
                    "to a card number that does not exist.\nYou should print " +
                    "'Such a card does not exist.'");
            }

            output = program.execute("3\n" + toTransferCardNumber + "\n100000");
            if (!output.toLowerCase().contains("not enough money")) {
                return new CheckResult(false, "You should not allow a transfer if " +
                    "there is not enough money in the account to complete it. You should print " +
                    "'Not enough money!'");
            }

            program.execute("2\n20000\n3\n" + toTransferCardNumber + "\n10000");

            stopAndCheckIfUserProgramWasStopped(program);

            int correctBalanceForBothAccounts = 10000;
            int toTransferCardBalance = getBalance(toTransferCardNumber);
            int correctCardNumberBalance = getBalance(correctCardNumber);

            if (toTransferCardBalance != correctBalanceForBothAccounts) {
                return new CheckResult(false, "Incorrect account balance of the card to which the transfer was made.");
            }

            if (correctCardNumberBalance != correctBalanceForBothAccounts) {
                return new CheckResult(false, "Incorrect account balance of the card used to make the transfer.");
            }

            return CheckResult.correct();
        }

        // ttest is not a typo!
        @DynamicTest
        CheckResult ttest12_checkTransfer() {

            deleteAllRows();

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2\n" + correctCardNumber + "\n" + correctPin + "\n4");

            stopAndCheckIfUserProgramWasStopped(program);

            try {
                PreparedStatement statement = getConnection().prepareStatement("SELECT * FROM card where number = ?");
                statement.setString(1, correctCardNumber);
                ResultSet resultSet = statement.executeQuery();
                if (resultSet.next()) {
                    return new CheckResult(false, "After closing the account, the card should be deleted " +
                        "from the database.");
                }
            } catch (SQLException e) {
                throw new WrongAnswer("Can't execute a query in your database! Make sure that your database isn't broken and you close your connection at the end of the program!");
            }

            closeConnection();
            return CheckResult.correct();
        }

        private static Connection getConnection() {
            if (connection == null) {
                try {
                    connection = DriverManager.getConnection("jdbc:sqlite:" + databaseFileName);
                } catch (SQLException exception) {
                    throw new WrongAnswer("Can't connect to the database! Make sure you close your database" +
                        " connection at the end of the program!");
                }
            }
            return connection;
        }

        private static void closeConnection() {
            if (connection == null)
                return;
            try {
                connection.close();
            } catch (SQLException ignored) {
            }
            connection = null;
        }

        //@BeforeClass
        public static void createTempDatabase() {

            closeConnection();

            Path userDbFile = Paths.get(databaseFileName);
            Path tempDbFile = Paths.get(tempDatabaseFileName);

            if (!userDbFile.toFile().exists())
                return;

            try {
                Files.deleteIfExists(tempDbFile);
                Files.copy(userDbFile, tempDbFile);
            } catch (Exception ignored) {
            }
        }

        //@AfterClass
        public static void deleteTempDatabase() {

            closeConnection();

            Path userDbFile = Paths.get(databaseFileName);
            Path tempDbFile = Paths.get(tempDatabaseFileName);

            if (!tempDbFile.toFile().exists())
                return;

            try {
                Files.deleteIfExists(userDbFile);
                Files.move(tempDbFile, userDbFile);
            } catch (Exception ignored) {
            }
        }

        private boolean getData(String out) {

            Pattern cardNumberPattern = Pattern.compile("400000\\d{10}");
            Matcher cardNumberMatcher = cardNumberPattern.matcher(out);

            Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);
            Matcher pinMatcher = pinPattern.matcher(out);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return false;
            }

            String number = cardNumberMatcher.group();
            String PIN = pinMatcher.group();

            if (!checkLuhnAlgorithm(number)) {
                return false;
            }

            correctData.put(number, PIN);

            return true;
        }

        private boolean checkLuhnAlgorithm(String cardNumber) {
            int result = 0;
            for (int i = 0; i < cardNumber.length(); i++) {
                int digit = Character.getNumericValue(cardNumber.charAt(i));
                if (i % 2 == 0) {
                    int doubleDigit = digit * 2 > 9 ? digit * 2 - 9 : digit * 2;
                    result += doubleDigit;
                    continue;
                }
                result += digit;
            }
            return result % 10 == 0;
        }

        private void deleteAllRows() {
            try {
                getConnection().createStatement().execute("DELETE FROM card");
                closeConnection();
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute a query in your database! Make sure that your database isn't broken and you close your connection at the end of the program!");
            }
        }

        private void stopAndCheckIfUserProgramWasStopped(TestedProgram program) {
            program.execute("0");
            if (!program.isFinished()) {
                throw new WrongAnswer("After choosing 'Exit' item you should stop your program" +
                    " and close database connection!");
            }
        }

        private static int getBalance(String cardNumber) {
            try {
                PreparedStatement preparedStatement = getConnection().prepareStatement("SELECT * FROM card WHERE number = ?");
                preparedStatement.setString(1, cardNumber);
                ResultSet resultSet = preparedStatement.executeQuery();
                resultSet.next();
                int result = resultSet.getInt("balance");
                closeConnection();
                return result;
            } catch (SQLException e) {
                throw new WrongAnswer("Can't execute a query in your database! Make sure that your database isn't broken and you close your connection at the end of the program!");
            }
        }
    }
  learner_created: false
- name: src/banking/entities/Card.java
  visible: true
  text: |
    package banking.entities;

    import java.util.Random;

    class Card {
        private String pin;
        private String cardNumber;
        private Random random;

        public Card() {
            this.random = new Random();
            generatePin();
            generateCardNumber();
        }

        public Card(String cardNumber, String pin){
            this.cardNumber = cardNumber;
            this.pin = pin;
        }

        private void generatePin() {
            int num = random.nextInt(0, 10000);
            this.pin = String.format("%04d", num);
        }

        private void generateCardNumber() {
            StringBuilder num = new StringBuilder();
            String cardNum;

            for (int i = 0; i < 9; i++) {
                num.append(random.nextInt(10));
            }
            cardNum = "400000" + num;
            this.cardNumber = cardNum + checksum(cardNum);
        }

        private int checksum(String number) {
            int digit = 0;
            int sum = 0;

            for (int i = 0; i < number.length(); i++) {
                digit = Integer.parseInt(String.valueOf(number.charAt(i)));

                if (i % 2 == 0) {
                    digit *= 2;

                    if (digit > 9) {
                        digit -= 9;
                    }
                }
                sum += digit;
            }

            return generateLastDigit(sum);
        }

        private int generateLastDigit(int number) {
            if (number % 10 == 0) {
                return number;
            }

            return 10 - number % 10;
        }

        public String getPin() {
            return pin;
        }

        public String getCardNumber() {
            return cardNumber;
        }

    }
  learner_created: true
- name: src/banking/Main.java
  visible: true
  text: |-
    package banking;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: src/banking/entities/Account.java
  visible: true
  text: |
    package banking.entities;

    import banking.util.Connect;

    public class Account {
        private int id;
        private Card card;
        private boolean loggedIn;
        private int balance;

        public Account() {
            this.id = Connect.getLastId() + 1;
            this.card = new Card();
            this.loggedIn = false;
            this.balance = 0;
        }

        public Account(int id, String number, String pin, int balance){
            this.id = id;
            this.card = new Card(number, pin);
            this.balance = 0;
            this.loggedIn = false;
        }

        public String getPin() {
            return card.getPin();
        }

        public String getCardNumber() {
            return card.getCardNumber();
        }

        public boolean isLoggedIn() {
            return loggedIn;
        }

        public void setLoggedIn(boolean loggedIn) {
            this.loggedIn = loggedIn;
        }

        public int getBalance() {
            return balance;
        }

        public void setBalance(int balance) {
            this.balance = balance;
        }

        public int getId() {
            return id;
        }
    }
  learner_created: true
- name: src/banking/util/Program.java
  visible: true
  text: |
    package banking.ui;

    import banking.entities.Account;
    import banking.util.Connect;

    import java.util.Map;
    import java.util.Scanner;

    public class Program {
        public static boolean running;
        private Bank bank;

        public Program() {
            bank = new Bank();
        }

        public void start() {
            running = true;
            Connect.createTable();
        }

        public void showMenu() {
            System.out.println("""
                    1. Create account
                    2. Log into account
                    0. Exit""");
        }

        public void createAccount() {
            bank.createAccount();
        }

        public void logIn() {
            Scanner scanner = new Scanner(System.in);
            String cardNumber;
            String pin;
            System.out.println("\nEnter your card number:");
            cardNumber = scanner.next();
            System.out.println("Enter your PIN:");
            pin = scanner.next();

            if (bank.logIn(cardNumber, pin)) {
                System.out.println("\nYou have successfully logged in!\n");
                loginMenu(cardNumber);
            } else {
                System.out.println("\nWrong card number or PIN!\n");
            }
        }

        private void loginMenu(String cardNumber) {
            Scanner scanner = new Scanner(System.in);
            Account acc = bank.getAccounts().get(cardNumber);
            int option;

            while (acc.isLoggedIn() && running) {
                System.out.println("""
                        1. Balance
                        2. Log out
                        0. Exit""");

                option = scanner.nextInt();
                switch (option) {
                    case 1 -> System.out.println("\nBalance: " + acc.getBalance() + "\n");
                    case 2 -> logOut(acc);
                    case 0 -> exit();
                }
            }
        }

        private void logOut(Account account) {
            System.out.println("\nYou have successfully logged out!\n");
            account.setLoggedIn(false);
        }

        public void exit() {
            System.out.println("\nBye!");
            running = false;
        }


    }
  learner_created: true
- name: src/banking/util/Bank.java
  visible: true
  text: |
    package banking.ui;

    import banking.entities.Account;
    import banking.util.Connect;

    import java.util.HashMap;
    import java.util.Map;

    class Bank {
        private Map<String, Account> accounts;

        public Bank() {
            accounts = new HashMap<>();
        }

        public void createAccount() {
            Account acc = new Account();
            this.retrieveFromDB();

            if (!accounts.containsKey(acc.getCardNumber()) && acc.getCardNumber().length() == 16) {
                accounts.put(acc.getCardNumber(), acc);
                System.out.println("\nYour card has been created");
                System.out.println("Your card number:");
                System.out.println(acc.getCardNumber());
                System.out.println("Your card PIN:");
                System.out.println(acc.getPin() + "\n");
                insertIntoDB(acc.getId(), acc.getCardNumber(), acc.getPin(), acc.getBalance());
            } else {
                createAccount();
            }
        }


        private void retrieveFromDB() {
            accounts = Connect.getAllAccFromDB();
        }

        public boolean logIn(String cardNumber, String pin) {
            this.retrieveFromDB();
            Account found = accounts.get(cardNumber);

            if ((found != null) && (found.getPin().equals(pin))) {
                found.setLoggedIn(true);
                return true;
            } else {
                return false;
            }
        }

        private void insertIntoDB(int id, String number, String pin, int balance) {
            Connect.insert(id, number, pin, balance);
        }

        public Map<String, Account> getAccounts() {
            return accounts;
        }
    }
  learner_created: true
- name: src/banking/util/Connect.java
  visible: true
  text: "package banking.util;\n\nimport banking.entities.Account;\nimport java.sql.*;\n\
    import java.util.HashMap;\nimport java.util.Map;\n\npublic class Connect {\n \
    \   private static final String URL = \"jdbc:sqlite:C:\\\\Users\\\\david\\\\IdeaProjects\\\
    \\Simple Banking System\\\\Simple Banking System\\\\task\\\\card.s3db\";\n\n\n\
    \    private static Connection connect() {\n        Connection conn = null;\n\n\
    \        try {\n            conn = DriverManager.getConnection(URL);\n       \
    \ } catch (SQLException e) {\n            System.out.println(e.getMessage());\n\
    \        }\n        return conn;\n    }\n\n    public static void createTable()\
    \ {\n        String sql = \"CREATE TABLE IF NOT EXISTS card (\\n\"\n         \
    \       + \"\tid INTEGER,\\n\"\n                + \"\tnumber TEXT,\\n\"\n    \
    \            + \"\tpin TEXT,\\n\"\n                + \" balance INTEGER DEFAULT\
    \ 0\"\n                + \");\";\n        try (Connection conn = connect();\n\
    \             Statement stmt = conn.createStatement()) {\n            stmt.execute(sql);\n\
    \        } catch (SQLException e) {\n            System.out.println(e.getMessage());\n\
    \        }\n    }\n\n    public static void insert(int id, String number, String\
    \ pin, int balance) {\n        String sql = \"INSERT INTO card(id, number, pin,\
    \ balance) VALUES(?,?,?,?)\";\n\n        try (Connection conn = connect();\n \
    \            PreparedStatement pstmt = conn.prepareStatement(sql)) {\n       \
    \     pstmt.setInt(1, id);\n            pstmt.setString(2, number);\n        \
    \    pstmt.setString(3, pin);\n            pstmt.setInt(4, balance);\n       \
    \     pstmt.executeUpdate();\n        } catch (SQLException e) {\n           \
    \ System.out.println(e.getMessage());\n        }\n    }\n\n    public static Map<String,\
    \ Account> getAllAccFromDB() {\n        String sql = \"SELECT * FROM card\";\n\
    \        Map<String, Account> accounts = new HashMap<>();\n        Account account;\n\
    \        int id;\n        String number;\n        String pin;\n        int balance;\n\
    \n        try (Connection conn = connect();\n             Statement stmt = conn.createStatement();\n\
    \             ResultSet rs = stmt.executeQuery(sql)) {\n            // loop through\
    \ the result set\n            while (rs.next()) {\n                id = rs.getInt(\"\
    id\");\n                number = rs.getString(\"number\");\n                pin\
    \ = rs.getString(\"pin\");\n                balance = rs.getInt(\"balance\");\n\
    \                account = new Account(id, number, pin, balance);\n          \
    \      accounts.put(number, account);\n            }\n        } catch (SQLException\
    \ e) {\n            System.out.println(e.getMessage());\n        }\n        return\
    \ accounts;\n    }\n\n    public static int getLastId() {\n        String sql\
    \ = \"SELECT * FROM card ORDER BY id DESC LIMIT 1\";\n\n        try (Connection\
    \ conn = connect();\n             Statement stmt = conn.createStatement();\n \
    \            ResultSet rs = stmt.executeQuery(sql)) {\n\n            if (!rs.next())\
    \ {\n                return 0;\n            }\n\n            return rs.getInt(\"\
    id\");\n\n        } catch (SQLException e) {\n            System.out.println(e.getMessage());\n\
    \        }\n\n        return -1;\n    }\n\n}\n"
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/8428#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Mon, 19 Sep 2022 15:07:09 UTC
record: 4
